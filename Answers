Dear HR,

Compliment of the season to you. Please find below the answers to your questions.

Section 1.
Question 1:  What are the key security concerns when it comes to DevOps?             
Answer:
Security is one of the major factors to be mindful of as a DevOps Engineer, it is so critical and requires integrating secure practices every step of the way, from development, deployment, and post-deployment lifecycle. This practice is called DevSecOps, it involves implementing security into all processes from managing access to repositories to setting up approval gates for merging PRs, setting up the least privileges to access the pipelines, enforcing static application security testing (SAST), enforcing secure coding and practices and code reviews, integrate automated security tests into CI/CD pipelines, etc.
Some of the areas of concern include but are not limited to;Vulnerabilities in the CI/CD pipeline: Attackers can take advantage of the CI/CD to inject malicious code or access sensitive data when they are hard coded in configuration files or scripts, and insufficient access control to pipelines. To mitigate that, we use tools like Azure key vault, HashiCorp Vault, or AWS Secrets Manager, implement multi-factor authentication (MFA) for access to CI/CD tools, and restrict permission using the principle of least privileges. Unsecure Deployment Practices: When the wrong deployment method is used, security can be compromised. All unrequired files should be ignored. Set up pipeline environmental variables to ensure security. Integrate static code analysis into the pipeline using tools like Snyk, Sonarcloud, etc. Make sure the codes, Docker images, etc. are well scanned and reviewed before the image is published to the container registry for consumption.Human Errors: Mistakes such as misconfiguration, accidental data deletion, or exposing credentials in public repositories can lead to security risks.Compliance and Governance: Failure to meet regulatory standards could result in reputational damage.Not following Security Best Practices: When DevSecOps is not implemented in the DevOps lifecycle, gaps within the process can be created, leaving the organization exposed.To avoid all these security concerns, every organization should adopt intentional team collaboration, automation (to ensure uniformity across the board), and continuous monitoring of the applications and the whole infrastructure.

Question 2:  How do you design a self-healing distributed service?            
Answer.
To define a self-healing distributed service, we should ensure a system that can automate failure detection and recover from failures without manual intervention is set up. This includes deploying the service in an active-active or active-passive configuration, using redundant nodes for critical components such as master-slave, and multi-region setups), using container orchestration tools like Kubernetes, and implementing auto-scaling to replace or add resources needed, using immutable infrastructure patterns for redeploying clean instances, using microservices architecture for approach, database replication, setting up retries to retry the failed operation after progressively longer delay. etc. Designing a self-healing distributed service cuts across all the steps required to make a service go life, this means, that during the setup for a project deployment, it must be part of the requirement to be worked on.

Question 3: Describe a centralized logging solution and how you can implement logging for amicroservice architecture.           
Answer.
A centralized logging solution aggregates logs from multiple services, applications, and infrastructure components into a single location for solid storage, analysis, and troubleshooting. The approach is beneficial in microservices architecture, where logs are scattered across multiple services and instances. To implement logging for microservices architecture, The team chooses a logging stack of their choice, there are many choices in the market today which include but are not limited to (ELK/EFK stack, Datadog, Splunk, Honey-comb, AWS CloudWatch, etc.Defining logging strategy like the log format (e.g., JSON), including context and log levels (e.g, Debug, info, warn, error, fatal, etc)Log collection: collect logs from containers etcConfigure Fluentd or Logstash to aggregate logs for a centralized loggingVisualize and analyze logs through the portal: Create a well-detailed portal, integrating with the necessary data sources to collect logs. Tools like Kibana or Grafana can also be used where needed.Enabling log rotation and Retention: To avoid excessive storage costs, we can set retention policies to retain logs for an x number of days, log rotation can also be used to archive and compress old logs.Log security: Logs in transit and at rest should be encrypted, accesses should also be restricted using IAM roles.

Question 4:  What are some of the reasons for choosing Terraform for DevOps?
Answer. 
I believe there are many reasons for an Engineer to choose terraform.Terraform uses declarative language which allows you to design the desired end state of your infrastructure and Terraform handles the provisioning to reach that state.Terraform supports multiple cloud providers (e.g., AWS, Azure, GCP) and on-premise solutions, making it an ideal tool for managing hybrid and multi-cloud environments.Terraform maintains a State file to monitor the current state of the infrastructure.Terraform has a two-step workflow: terraform plan, to a preview or change, and, terraform apply, to execute planned changes.Consistency across platforms: It ensures consistency in infrastructure deployment even in environments when using a modularized terraform.Terraform can easily be integrated with CI/CD pipelines seamlessly.Terraform is cost-efficient.Question 5:  How would you design and implement a secure CI/CD architecture for microservicedeployment using GitOps? Take a scenario of 20 microservices developed usingdifferent languages and deploying to an orchestrated environment like Kubernetes.(You can add a low-level architectural diagram)            Answer.It should be a priority for all DevOps Engineers to implement a secure CI/CD architecture for microservices using GitOps for Kubernetes requires an approach that focuses on automation, security, scalability, and observability.
The GitOps is used as a source of truth as the git repositories store infrastructure and application files and configurations, allowing us to set up CI/CD pipelines for automation of build, test, and deployment processes. Kubernetes cluster is used as the destination of the deployed applications using the microservices architecture. At every stage of this, security is paramount, there's a need to integrate secret management, vulnerability scanning, RBAC, and monitoring.

Question 6:  You notice React Native builds are failing intermittently. What’s your debuggingprocess?            
Answer.
To debug intermittent React Native build failures, you must systematically narrow down potential issues in the pipeline, environments, and dependencies.
It involves Gathering the required information, such as reproducing the issue, reviewing and examining the logs, Analyzing the frequency, and checking for environmental issues (e.g., Local vs. CI/CD Builds, version mismatch, etc.). Also, investigate dependency issues; packages may be outdated or incompatible. Analyze the CI/CD pipeline to ensure a consistent environment and verify no missing dependencies or outdated tools, ensuring environment variables are available in the CI/CD pipeline. 


Section 2.
Question 9:  A Postgres query is running slower than expected. Explain your approach totroubleshooting it.             
Answer.
When a PostgreSQL query is running slower than expected, a systematic troubleshooting approach can help identify and resolve the issue.  We need to understand the Query details (as in, what is the query trying to achieve? is it a SELECT, UPDATE, INSERT, or DELETE?)Then, Run EXPLAIN ANALYZE to identify slow steps (e.g., sequential scans, joins).Check if indexes exist for the filtered columns.Add missing indexes or optimize the query logic.Monitor query performance after updates.Analyze PostgreSQL logs for additional context.


Section 3.
Question 11:  How would you set up monitoring for the React Native mobile app’s API endpoints?            
Answer.
Setting up monitoring for the API endpoints of a React Native mobile app involves several steps. The goal is to ensure the app's interactions with its backend are tracked for performance, uptime, and errors. To achieve this, some of the steps include;
Setup Monitoring tools to monitor the API endpoints: We can use any or combination of the monitoring tools (e.g., Datadog, which provides full-stack monitoring, New Relic, Prometheus/Grafana, Azure Application insights, AWS CloudWatch), etc to track response time, error rate, request volume, latency.Backend API Monitoring: This can be achieved using Azure APIM or AWS API Gateway. This helps us to set up logging and monitoring directly in the platform.Setup Alerts: Alerting Rules: Set up alerts in your monitoring tools to get notified when certain thresholds are reached (e.g., high error rate, slow response time, etc.). For example: Set up monitors to notify you when the response time exceeds a specific threshold. Azure Application Insights: Set up an alert for increased error rates or slow requests.Section 4.

Question 13:  Describe a time you improved the performance of an infrastructure system. Whatchallenges did you face? 
Answer
After assuming my position as the Team Lead, I was tasked with migrating our infrastructure from Azure to AWS, ensuring security best practices and also, reducing cost. Initially, the organization was using a manual approach for infrastructure provisioning, part of my task is to use IaC for the migration and ensure the environments are identical and follow the well-architected framework, create each environment in a separate account for better security, etc. The challenges faced are mentioned but not limited to below;
Requirement gathering: It became difficult and took a lot of time to gather requirements and dependencies of the infrastructure and the applications. Some of the applications were legacy applications, and getting the time from the team to go over it was difficult because most of the people did not have the details of the infrastructure and apps because they weren't there when it was built. Adaptation: It took some time before the team could embrace the new platform and it required some knowledge transfers to people.Post-cutoff issues: When there was a cutover, there was a bigger problem as some of the major applications started failing their dependencies hence, we started chaos engineering to ensure the issues were resolved on time.

Question 14:  How do you prioritize tasks when multiple urgent issues arise? To prioritize multiple urgent issues, first, I'll evaluate the Business impact of the reported issues on the end users, and then, should be resolved orderly, I'll scope the issues to see if it's affecting a small number of people, some set of people or it's affecting the whole system. I'll then perform a root cause analysis, break down the large issues into smaller problems, and fix, and communicate with stakeholders to set expectations and communicate timelines and expectations, escalation would be done when necessary.

There might also be a need to mitigate the issue (set a short time fix) for a quick win while a thorough root cause analysis is done to know the root of the problem, I'll then review, reflect and document my findings.
